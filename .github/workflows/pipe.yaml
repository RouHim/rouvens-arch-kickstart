name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

jobs:

  check-repo:
    name: Check git repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-code-style:
    name: Check code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install gtk4 dependencies
        run: sudo apt install -y libgtk-4-dev build-essential

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching

      - name: Check the code style
        run: cargo fmt --all -- --check

  check-code:
    name: Check rust code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install gtk4 dependencies
        run: sudo apt install -y libgtk-4-dev build-essential

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching

      - name: Verify code
        run: cargo clippy

  test:
    name: Run application tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install gtk4 dependencies
        run: sudo apt install -y libgtk-4-dev build-essential

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching

      - name: Test code
        run: cargo test

  build:
    name: Build executable
    needs: [ check-repo, check-code-style, check-code, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable

      - name: Install gtk4 dependencies
        run: sudo apt install -y libgtk-4-dev build-essential

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching

      - name: Build application
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          cp target/x86_64-unknown-linux-gnu/release/rouvens-arch-kickstart ./rak-x86-64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-linux-x86_64
          path: rak-x86-64

  release-artifact:
    name: Release artifacts
    needs: [ build ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download previous built application
        uses: actions/download-artifact@v4
        with:
          name: artifact-linux-x86_64
          path: .

      - name: Ensure that rak-x86-64 exists
        run: |
          if [ ! -f rak-x86-64 ]; then
            echo "rak-x86-64 does not exist"
            exit 1
          fi

      # Create a new release based on semantic versioning
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: |
          npm install -g \
             semantic-release  \
            @semantic-release/git  \
            @semantic-release/gitlab  \
            @semantic-release/changelog  \
            @semantic-release/exec \
            @semantic-release/commit-analyzer \
            conventional-changelog-conventionalcommits

      - name: Generate Semantic Release Notes and Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: npx semantic-release

      - name: Upload the x86 built binaries to the release
        run: |
          bash .github/scripts/upload-asset-to-release.sh \
            ${{ secrets.RELEASE_TOKEN }} \
            "rak-x86-64" \
            "rak-x86_64"

      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.3.3
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

