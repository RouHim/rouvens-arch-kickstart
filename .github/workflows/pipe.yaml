name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

jobs:

  check-repo:
    name: Check git repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-code-style:
    name: Check code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching

      - name: Check the code style
        run: cargo fmt --all -- --check

  check-code:
    name: Check rust code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching

      - name: Verify code
        run: cargo clippy

  test:
    name: Run application tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching

      - name: Test code
        run: cargo test

  check-unused-dependencies:
    name: Check for unused deps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        continue-on-error: true # upload cache even if there are errors in this step

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked

      - name: Analyze dependencies
        run: cargo +nightly udeps

  build:
    name: Build executable
    needs: [ check-repo, check-code-style, check-code, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching

      - name: Build application
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          cp target/x86_64-unknown-linux-gnu/release/rouvens-arch-kickstart ./rak-x86-64

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact-linux-x86_64
          path: rak-x86-64

#  github-release:
#    name: Create GitHub release
#    runs-on: ubuntu-latest
#    needs: [ build, build-deb-package , build-rpm-package ]
#    if: github.ref_name == 'main' # only publish if the branch is main
#    permissions:
#      contents: write
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Download previous built application
#        uses: actions/download-artifact@v3
#        with:
#          name: artifact-linux-x86_64
#          path: .
#
#      # Create a new release based on semantic versioning
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18.x
#
#      - name: Install Dependencies
#        run: |
#          npm install -g \
#             semantic-release  \
#            @semantic-release/git  \
#            @semantic-release/gitlab  \
#            @semantic-release/changelog  \
#            @semantic-release/exec \
#            @semantic-release/commit-analyzer \
#            conventional-changelog-conventionalcommits
#
#      - name: Generate Semantic Release Notes and Create Release
#        env:
#          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
#        run: npx semantic-release
#
#      - name: Upload plain linux-x86_64 asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ github.event.release.upload_url }}
#          asset_path: rak-x86-64
#          asset_name: rak-x86-64
#          asset_content_type: application/x-executable
#
#      - name: Delete old releases
#        uses: dev-drprasad/delete-older-releases@v0.2.1
#        with:
#          keep_latest: 50
#          delete_tags: true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}